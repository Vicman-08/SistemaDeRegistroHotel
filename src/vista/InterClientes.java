package vista;


import conexion.Conexion;
import java.awt.Dimension;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author minparis.gomez
 */
public class InterClientes extends javax.swing.JInternalFrame {

    /**
     * Creates new form InterClientes
     */
    public InterClientes() {
        initComponents();  
        configurarEventos();  
        cargarClientesEnTabla();
        this.setSize(new Dimension(1000, 407));
        this.setTitle("Clientes");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TableClientes = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txt_Apema = new javax.swing.JLabel();
        label = new javax.swing.JLabel();
        label1 = new javax.swing.JLabel();
        txt_Nombre = new javax.swing.JTextField();
        txt_ApellidoPaterno = new javax.swing.JTextField();
        txt_ApellidoMaterno = new javax.swing.JTextField();
        txt_Telefono = new javax.swing.JTextField();
        txt_Direccion = new javax.swing.JTextField();
        EditarCliente = new javax.swing.JButton();
        CrearCliente = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txt_Correo = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();

        TableClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID Cliente", "Nombre", "Apellido Paterno", "Apellido Materno", "Telefono", "Direccion", "Correo Electronico"
            }
        ));
        jScrollPane1.setViewportView(TableClientes);

        jLabel1.setText("Nombre");

        jLabel2.setText("Apellido Paterno");

        txt_Apema.setText("Apellido Materno");

        label.setText("Telefono");

        label1.setText("Direccion");

        EditarCliente.setText("Editar Cliente");
        EditarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditarClienteActionPerformed(evt);
            }
        });

        CrearCliente.setText("Crear Cliente");
        CrearCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CrearClienteActionPerformed(evt);
            }
        });

        jLabel3.setText("Correo Electronico:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel4.setText("Lista de Clientes:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 970, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(CrearCliente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(EditarCliente))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_Nombre, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_ApellidoPaterno, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_ApellidoMaterno, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_Apema))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_Telefono, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label1)
                    .addComponent(txt_Direccion, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(txt_Correo, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(txt_Apema)
                            .addComponent(label)
                            .addComponent(label1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_Nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_ApellidoPaterno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_ApellidoMaterno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_Telefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_Direccion, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_Correo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CrearCliente)
                    .addComponent(EditarCliente))
                .addGap(31, 31, 31))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void EditarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditarClienteActionPerformed
        this.editarCliente();
        cargarClientesEnTabla();
        limpiarCamposEditar();
    }//GEN-LAST:event_EditarClienteActionPerformed

    private void CrearClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CrearClienteActionPerformed
        this.crearCliente();
        cargarClientesEnTabla();
        limpiarCamposEditar();
    }//GEN-LAST:event_CrearClienteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CrearCliente;
    private javax.swing.JButton EditarCliente;
    private javax.swing.JTable TableClientes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel label;
    private javax.swing.JLabel label1;
    private javax.swing.JTextField txt_ApellidoMaterno;
    private javax.swing.JTextField txt_ApellidoPaterno;
    private javax.swing.JLabel txt_Apema;
    private javax.swing.JTextField txt_Correo;
    private javax.swing.JTextField txt_Direccion;
    private javax.swing.JTextField txt_Nombre;
    private javax.swing.JTextField txt_Telefono;
    // End of variables declaration//GEN-END:variables
    // Método para cargar clientes en la tabla
private void cargarClientesEnTabla() {
    String query = "SELECT idCliente, nombre, apellidoPaterno, apellidoMaterno, telefono, direccion, correo FROM Cliente";

    try (java.sql.Connection conn = Conexion.conectar();
         java.sql.Statement stmt = conn.createStatement();
         ResultSet rs = stmt.executeQuery(query)) {

        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(new String[]{
            "ID", "Nombre", "Apellido Paterno", "Apellido Materno", "Teléfono", "Dirección", "Correo"
        });

        while (rs.next()) {
            model.addRow(new Object[]{
                rs.getInt("idCliente"),
                rs.getString("nombre"),
                rs.getString("apellidoPaterno"),
                rs.getString("apellidoMaterno"),
                rs.getString("telefono"),
                rs.getString("direccion"),
                rs.getString("correo")
            });
        }

        TableClientes.setModel(model);

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al cargar los clientes: " + e.getMessage());
    }
}

// Método para cargar los datos seleccionados de la JTable en los JTextField
private void cargarDatosClienteDesdeTabla() {
    int filaSeleccionada = TableClientes.getSelectedRow();

    if (filaSeleccionada >= 0) {
        txt_Nombre.setText(TableClientes.getValueAt(filaSeleccionada, 1).toString());
        txt_ApellidoPaterno.setText(TableClientes.getValueAt(filaSeleccionada, 2).toString());
        txt_ApellidoMaterno.setText(TableClientes.getValueAt(filaSeleccionada, 3).toString());
        txt_Telefono.setText(TableClientes.getValueAt(filaSeleccionada, 4).toString());
        txt_Direccion.setText(TableClientes.getValueAt(filaSeleccionada, 5).toString());
        txt_Correo.setText(TableClientes.getValueAt(filaSeleccionada, 6).toString()); // Asegúrate de esta línea
    }
}


// Método para limpiar los campos de edición
private void limpiarCamposEditar() {
    txt_Nombre.setText("");
    txt_ApellidoPaterno.setText("");
    txt_ApellidoMaterno.setText("");
    txt_Telefono.setText("");
    txt_Direccion.setText("");
    txt_Correo.setText("");
}

// Método para crear un cliente
private void crearCliente() {
    String nombre = txt_Nombre.getText().trim();
    String apellidoPaterno = txt_ApellidoPaterno.getText().trim();
    String apellidoMaterno = txt_ApellidoMaterno.getText().trim();
    String telefono = txt_Telefono.getText().trim();
    String direccion = txt_Direccion.getText().trim();
    String correo = txt_Correo.getText().trim();

    if (nombre.isEmpty() || apellidoPaterno.isEmpty() || telefono.isEmpty() || direccion.isEmpty() || correo.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos obligatorios.");
        return;
    }

    String query = "INSERT INTO Cliente (nombre, apellidoPaterno, apellidoMaterno, telefono, direccion, correo) VALUES (?, ?, ?, ?, ?, ?)";

    try (java.sql.Connection conn = Conexion.conectar();
         java.sql.PreparedStatement pst = conn.prepareStatement(query)) {

        pst.setString(1, nombre);
        pst.setString(2, apellidoPaterno);
        pst.setString(3, apellidoMaterno);
        pst.setString(4, telefono);
        pst.setString(5, direccion);
        pst.setString(6, correo);

        int filasAfectadas = pst.executeUpdate();

        if (filasAfectadas > 0) {
            JOptionPane.showMessageDialog(this, "Cliente creado exitosamente.");
            limpiarCamposCrear();
            cargarClientesEnTabla();
        } else {
            JOptionPane.showMessageDialog(this, "No se pudo crear el cliente.");
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al crear el cliente: " + e.getMessage());
    }
}

// Método para limpiar los campos de creación
private void limpiarCamposCrear() {
    txt_Nombre.setText("");
    txt_ApellidoPaterno.setText("");
    txt_ApellidoMaterno.setText("");
    txt_Telefono.setText("");
    txt_Direccion.setText("");
    txt_Correo.setText("");
}

// Método para editar un cliente
private void editarCliente() {
    TableClientes.requestFocus();
    int filaSeleccionada = TableClientes.getSelectedRow();

    if (filaSeleccionada < 0) {
        JOptionPane.showMessageDialog(this, "Por favor, seleccione un cliente para editar.");
        return;
    }

    int idCliente = Integer.parseInt(TableClientes.getValueAt(filaSeleccionada, 0).toString());
    String nombre = txt_Nombre.getText().trim();
    String apellidoPaterno = txt_ApellidoPaterno.getText().trim();
    String apellidoMaterno = txt_ApellidoMaterno.getText().trim();
    String telefono = txt_Telefono.getText().trim();
    String direccion = txt_Direccion.getText().trim();
    String correo = txt_Correo.getText().trim();

    if (nombre.isEmpty() || apellidoPaterno.isEmpty() || telefono.isEmpty() || direccion.isEmpty() || correo.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos obligatorios.");
        return;
    }

    String query = "UPDATE Cliente SET nombre = ?, apellidoPaterno = ?, apellidoMaterno = ?, telefono = ?, direccion = ?, correo = ? WHERE idCliente = ?";

    try (java.sql.Connection conn = Conexion.conectar();
         java.sql.PreparedStatement pst = conn.prepareStatement(query)) {

        pst.setString(1, nombre);
        pst.setString(2, apellidoPaterno);
        pst.setString(3, apellidoMaterno);
        pst.setString(4, telefono);
        pst.setString(5, direccion);
        pst.setString(6, correo);
        pst.setInt(7, idCliente);

        int filasAfectadas = pst.executeUpdate();

        if (filasAfectadas > 0) {
            JOptionPane.showMessageDialog(this, "Cliente actualizado exitosamente.");
            cargarClientesEnTabla();
        } else {
            JOptionPane.showMessageDialog(this, "No se pudo actualizar el cliente.");
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al actualizar el cliente: " + e.getMessage());
    }
}
    
    // Método para configurar el evento de selección en la JTable
    private void configurarEventos() {
        TableClientes.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                cargarDatosClienteDesdeTabla();
            }
        });
    }

}
