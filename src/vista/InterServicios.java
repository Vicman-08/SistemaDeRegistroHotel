package vista;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import com.mysql.jdbc.Statement;
import conexion.Conexion;
import java.awt.Dimension;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author minparis.gomez
 */
public class InterServicios extends javax.swing.JInternalFrame {

    /**
     * Creates new form InterFacturas
     */
    public InterServicios() {
        initComponents();
        cargarReservaciones();
        cargarServiciosEnTabla();
        this.setSize(new Dimension(890, 407));
        this.setTitle("Reservaciones");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane4 = new javax.swing.JScrollPane();
        TablaReservaciones = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaServicios = new javax.swing.JTable();
        txt_IdReserva = new javax.swing.JTextField();
        txt_Precio = new javax.swing.JTextField();
        txt_Descripcion = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        TablaReservaciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID Reserva", "Cliente", "Fecha Inicio", "Fecha Fin", "Fecha Reserva", "Habitaciones"
            }
        ));
        TablaReservaciones.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaReservacionesMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(TablaReservaciones);

        TablaServicios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID Servico", "ID Reserva:", "Cliente", "Habitacion", "Precio", "Descripcion"
            }
        ));
        TablaServicios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaServiciosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TablaServicios);

        txt_IdReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_IdReservaActionPerformed(evt);
            }
        });

        txt_Precio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_PrecioActionPerformed(evt);
            }
        });

        jLabel1.setText("ID Reserva:");

        jLabel2.setText("Precio:");

        jLabel3.setText("Descripcion:");

        jButton1.setText("Editar Servicio");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Crear Servicio");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel6.setText("Servicios:");

        jLabel7.setText("Reservas:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(txt_IdReserva, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txt_Precio, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txt_Descripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton1)
                                    .addComponent(jButton2))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 549, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 36, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(12, 12, 12))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txt_IdReserva, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txt_Precio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txt_Descripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton2))
                    .addComponent(jButton1))
                .addContainerGap(396, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txt_IdReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_IdReservaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_IdReservaActionPerformed

    private void txt_PrecioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_PrecioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_PrecioActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.editarServicio();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.crearServicio();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void TablaServiciosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaServiciosMouseClicked
        this.cargarDatosServicioDesdeTabla();
    }//GEN-LAST:event_TablaServiciosMouseClicked

    private void TablaReservacionesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaReservacionesMouseClicked
        this.cargarIdReservaDesdeTabla();
    }//GEN-LAST:event_TablaReservacionesMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TablaReservaciones;
    private javax.swing.JTable TablaServicios;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField txt_Descripcion;
    private javax.swing.JTextField txt_IdReserva;
    private javax.swing.JTextField txt_Precio;
    // End of variables declaration//GEN-END:variables
    private void cargarReservaciones() {
    // Consulta SQL para obtener los datos de las reservas con sus habitaciones
    String query = "SELECT r.idReserva, c.nombre, c.apellidoPaterno, c.apellidoMaterno, " +
                   "r.fecha_inicio, r.fecha_fin, GROUP_CONCAT(h.idHabitacion SEPARATOR ', ') AS habitaciones " +
                   "FROM Reserva r " +
                   "JOIN Cliente c ON r.idCliente = c.idCliente " +
                   "JOIN HabitacionReserva hr ON r.idReserva = hr.idReserva " +
                   "JOIN Habitacion h ON hr.idHabitacion = h.idHabitacion " +
                   "GROUP BY r.idReserva, c.nombre, c.apellidoPaterno, c.apellidoMaterno, r.fecha_inicio, r.fecha_fin";

    try (java.sql.Connection conn = Conexion.conectar();
         java.sql.Statement stmt = conn.createStatement();
         ResultSet rs = stmt.executeQuery(query)) {

        // Crear el modelo de la tabla
        DefaultTableModel model = (DefaultTableModel) TablaReservaciones.getModel();

        // Limpiar las filas actuales (en caso de que haya datos previos)
        model.setRowCount(0);

        // Llenar el modelo con los datos del ResultSet
        while (rs.next()) {
            Object[] row = new Object[6];
            row[0] = rs.getInt("idReserva");
            row[1] = rs.getString("nombre") + " " + rs.getString("apellidoPaterno") + " " + rs.getString("apellidoMaterno");
            row[2] = rs.getDate("fecha_inicio");
            row[3] = rs.getDate("fecha_fin");
            row[4] = rs.getString("habitaciones"); // Lista de habitaciones asociadas

            model.addRow(row);
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al cargar las reservaciones: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    
   private void cargarServiciosEnTabla() {
    // Crear el modelo de la tabla
    DefaultTableModel modelo = new DefaultTableModel();
    modelo.setColumnIdentifiers(new Object[]{"ID Servicio", "ID Reserva", "Cliente", "Habitaciones", "Descripción", "Precio"});

    // Asignar el modelo a la tabla
    TablaServicios.setModel(modelo);

    // Consulta SQL para obtener los datos de los servicios con el nombre del cliente, ID de reserva y habitaciones asociadas
    String query = "SELECT s.idServicio, r.idReserva, " +
                   "CONCAT(c.nombre, ' ', c.apellidoPaterno, ' ', IFNULL(c.apellidoMaterno, '')) AS cliente, " +
                   "GROUP_CONCAT(h.idHabitacion SEPARATOR ', ') AS habitaciones, " +
                   "s.descripcion, " +
                   "s.precio " +
                   "FROM Servicio s " +
                   "JOIN Reserva r ON s.idReserva = r.idReserva " +
                   "JOIN Cliente c ON r.idCliente = c.idCliente " +
                   "JOIN HabitacionReserva hr ON r.idReserva = hr.idReserva " +
                   "JOIN Habitacion h ON hr.idHabitacion = h.idHabitacion " +
                   "GROUP BY s.idServicio, r.idReserva, c.nombre, c.apellidoPaterno, c.apellidoMaterno, s.descripcion, s.precio";

    try (java.sql.Connection conn = Conexion.conectar();
         java.sql.Statement stmt = conn.createStatement();
         ResultSet rs = stmt.executeQuery(query)) {

        // Limpiar el modelo actual
        modelo.setRowCount(0);

        // Llenar el modelo con los datos obtenidos de la consulta
        while (rs.next()) {
            Object[] fila = new Object[]{
                rs.getInt("idServicio"),
                rs.getInt("idReserva"),       // Agregar el ID de la reserva
                rs.getString("cliente"),
                rs.getString("habitaciones"),
                rs.getString("descripcion"),
                rs.getDouble("precio")
            };
            modelo.addRow(fila);
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al cargar los servicios: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}


    private void cargarDatosServicioDesdeTabla() {
        int filaSeleccionada = TablaServicios.getSelectedRow();

        if (filaSeleccionada >= 0) {
            // Obtener los valores de las columnas correspondientes y asignarlos a los JTextField
            txt_IdReserva.setText(TablaServicios.getValueAt(filaSeleccionada, 1).toString());
            txt_Descripcion.setText(TablaServicios.getValueAt(filaSeleccionada, 4).toString());
            txt_Precio.setText(TablaServicios.getValueAt(filaSeleccionada, 5).toString());
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione un servicio de la tabla.");
        }
    }
    
    private void cargarIdReservaDesdeTabla() {
        int filaSeleccionada = TablaReservaciones.getSelectedRow();

        if (filaSeleccionada >= 0) {
            // Obtener el valor de la columna 0 (idReserva) y asignarlo al JTextField
            txt_IdReserva.setText(TablaReservaciones.getValueAt(filaSeleccionada, 0).toString());
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione una reservación de la tabla.");
        }
    }

    private void crearServicio() {
    // Obtener los valores de los JTextField
    String idReservaStr = txt_IdReserva.getText().trim();
    String descripcion = txt_Descripcion.getText().trim();
    String precioStr = txt_Precio.getText().trim();

    // Validar que los campos no estén vacíos
    if (idReservaStr.isEmpty() || descripcion.isEmpty() || precioStr.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos obligatorios.");
        return;
    }

    try {
        // Convertir idReserva y precio a sus tipos adecuados
        int idReserva = Integer.parseInt(idReservaStr);
        double precio = Double.parseDouble(precioStr);

        // Consulta SQL para insertar el servicio
        String insertQuery = "INSERT INTO Servicio (idReserva, descripcion, precio) VALUES (?, ?, ?)";

        try (java.sql.Connection conn = Conexion.conectar();
             java.sql.PreparedStatement pst = conn.prepareStatement(insertQuery)) {

            pst.setInt(1, idReserva);
            pst.setString(2, descripcion);
            pst.setDouble(3, precio);

            int filasAfectadas = pst.executeUpdate();

            if (filasAfectadas > 0) {
                JOptionPane.showMessageDialog(this, "Servicio creado exitosamente.");
                limpiarCamposCrearServicio();
                cargarServiciosEnTabla();
            } else {
                JOptionPane.showMessageDialog(this, "No se pudo crear el servicio.");
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al crear el servicio: " + e.getMessage());
        }

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "El ID de la reserva y el precio deben ser números válidos.");
    }
}

    
    private void editarServicio() {
    // Forzar el foco en la tabla
    TablaServicios.requestFocus();

    // Obtener la fila seleccionada
    int filaSeleccionada = TablaServicios.getSelectedRow();
    System.out.println("Fila seleccionada: " + filaSeleccionada); // Depuración

    if (filaSeleccionada < 0) {
        JOptionPane.showMessageDialog(this, "Por favor, seleccione un servicio para editar.");
        return;
    }

    // Obtener el ID del servicio desde la tabla
    int idServicio = Integer.parseInt(TablaServicios.getValueAt(filaSeleccionada, 0).toString());
    String idReservaStr = txt_IdReserva.getText().trim();
    String descripcion = txt_Descripcion.getText().trim();
    String precioStr = txt_Precio.getText().trim();

    // Validar que los campos no estén vacíos
    if (idReservaStr.isEmpty() || descripcion.isEmpty() || precioStr.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos obligatorios.");
        return;
    }

    try {
        int idReserva = Integer.parseInt(idReservaStr);
        double precio = Double.parseDouble(precioStr);

        // Consulta SQL para actualizar el servicio
        String query = "UPDATE Servicio SET idReserva = ?, descripcion = ?, precio = ? WHERE idServicio = ?";

        try (java.sql.Connection conn = Conexion.conectar();
             java.sql.PreparedStatement pst = conn.prepareStatement(query)) {

            pst.setInt(1, idReserva);
            pst.setString(2, descripcion);
            pst.setDouble(3, precio);
            pst.setInt(4, idServicio);

            int filasAfectadas = pst.executeUpdate();

            if (filasAfectadas > 0) {
                JOptionPane.showMessageDialog(this, "Servicio actualizado exitosamente.");
                limpiarCamposCrearServicio();
                cargarServiciosEnTabla();
            } else {
                JOptionPane.showMessageDialog(this, "No se pudo actualizar el servicio.");
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al actualizar el servicio: " + e.getMessage());
        }

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "El ID de la reserva y el precio deben ser números válidos.");
    }
}


    private void limpiarCamposCrearServicio() {
    txt_IdReserva.setText("");
    txt_Descripcion.setText("");
    txt_Precio.setText("");
}

}
