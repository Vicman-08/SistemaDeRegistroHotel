package vista;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import conexion.Conexion;
import java.sql.*;
import javax.swing.table.DefaultTableModel;
import javax.mail.*;
import javax.mail.internet.*;
import java.awt.Desktop;
import java.awt.Dimension;
import java.io.File;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Properties;
import javax.swing.JOptionPane;
import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import java.util.List;
import java.util.ArrayList;


/**
 *
 * @author Victor
 */
public class InterFactura extends javax.swing.JInternalFrame {

    /**
     * Creates new form InterFactura
     */
    public InterFactura() {
        initComponents();
        cargarReservaciones();
        cargarFacturasEnTabla();
        this.setSize(new Dimension(1157, 650));
        this.setTitle("Factura");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Factura = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        TablaReservaciones = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaFacturas = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        Factura.setText("Enviar Factura");
        Factura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FacturaActionPerformed(evt);
            }
        });

        TablaReservaciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID HabitacionReserva", "Cliente", "Fecha Inicio", "Fecha Fin", "Fecha Reserva", "Habitaciones"
            }
        ));
        TablaReservaciones.setPreferredSize(new java.awt.Dimension(250, 80));
        jScrollPane4.setViewportView(TablaReservaciones);

        TablaFacturas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID Factura", "Cliente", "Fecha Emision", "Habitaciones", "Total Habitaciones", "Total Servicios", "Total"
            }
        ));
        TablaFacturas.setPreferredSize(new java.awt.Dimension(250, 80));
        jScrollPane1.setViewportView(TablaFacturas);

        jButton1.setText("Pagar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Reservaciones:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setText("Facturas:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 1000, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1001, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Factura, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(190, 190, 190)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Factura)
                .addGap(144, 144, 144))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void FacturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FacturaActionPerformed
        this.generarFacturaDesdeTabla();
    }//GEN-LAST:event_FacturaActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.generarFactura();
        cargarFacturasEnTabla();
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Factura;
    private javax.swing.JTable TablaFacturas;
    private javax.swing.JTable TablaReservaciones;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    // End of variables declaration//GEN-END:variables
public void generarFacturaDesdeTabla() {
    int filaSeleccionada = TablaFacturas.getSelectedRow();

    if (filaSeleccionada < 0) {
        JOptionPane.showMessageDialog(this, "Por favor, seleccione una factura de la tabla.");
        return;
    }

    int idFactura = Integer.parseInt(TablaFacturas.getValueAt(filaSeleccionada, 0).toString());
    String rutaCarpeta = "C:\\Users\\Victor\\Documents\\Proyecto final TA\\PDF BDHotel";
    String fileName = rutaCarpeta + "\\Factura_" + idFactura + ".pdf";

    try (Connection conn = Conexion.conectar()) {
        // Consulta para obtener datos principales de la factura
        String queryFactura = "SELECT f.idFactura, f.fecha_emision, f.total_habitacion, f.total_servicios, f.total, " +
                              "c.correo, CONCAT(c.nombre, ' ', c.apellidoPaterno, ' ', IFNULL(c.apellidoMaterno, '')) AS cliente " +
                              "FROM Factura f " +
                              "JOIN Reserva r ON f.idReserva = r.idReserva " +
                              "JOIN Cliente c ON r.idCliente = c.idCliente " +
                              "WHERE f.idFactura = ?";

        PreparedStatement pstFactura = conn.prepareStatement(queryFactura);
        pstFactura.setInt(1, idFactura);
        ResultSet rsFactura = pstFactura.executeQuery();

        if (rsFactura.next()) {
            String correoDestino = rsFactura.getString("correo").trim();

            // Verificar si el archivo existe antes de enviarlo
            File archivo = new File(fileName);
            if (!archivo.exists()) {
                JOptionPane.showMessageDialog(this, "El archivo PDF no se encuentra en la ruta especificada: " + fileName, "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Enviar el correo con el archivo adjunto
            enviarCorreoConAdjunto(correoDestino, fileName);
        } else {
            JOptionPane.showMessageDialog(this, "No se encontr칩 la factura seleccionada.");
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al generar la factura: " + e.getMessage());
    }
}



    private void enviarCorreoConAdjunto(String emailDestino, String filePath) {
    // Configuraci칩n del servidor SMTP (usando Gmail como ejemplo)
    final String remitente = "sistemahotelprueba@gmail.com"; // Tu correo
    final String password = "qjqioxbqlpcdlmso"; // Contrase침a de aplicaci칩n

    // Configuraci칩n de propiedades
    Properties props = new Properties();
    props.put("mail.smtp.auth", "true");
    props.put("mail.smtp.starttls.enable", "true");
    props.put("mail.smtp.host", "smtp.gmail.com");
    props.put("mail.smtp.port", "587");

    // Crear la sesi칩n de correo
    Session session = Session.getInstance(props, new javax.mail.Authenticator() {
        protected PasswordAuthentication getPasswordAuthentication() {
            return new PasswordAuthentication(remitente, password);
        }
    });

    // Habilitar la depuraci칩n de SMTP (opcional para verificar errores)
    session.setDebug(true);

    try {
        // Crear el mensaje
        Message message = new MimeMessage(session);
        message.setFrom(new InternetAddress(remitente));
        message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(emailDestino));
        message.setSubject("Factura Generada");

        // Cuerpo del mensaje
        MimeBodyPart mensajeTexto = new MimeBodyPart();
        mensajeTexto.setText("Estimado/a hu칠sped,\n\n" +
        "Esperamos que haya disfrutado de su estancia con nosotros y que haya tenido una experiencia relajante y placentera.\n\n" +
        "Adjunto encontrar치 su factura en formato PDF con los detalles correspondientes a su estancia.\n\n" +
        "Si tiene alguna pregunta o necesita asistencia adicional, no dude en contactarnos.\n\n" +
        "Atentamente,\n" +
        "El equipo de Hotel El Dormilon");



        // Adjuntar el archivo PDF
        MimeBodyPart adjunto = new MimeBodyPart();
        DataSource source = new FileDataSource(filePath);
        adjunto.setDataHandler(new DataHandler(source));
        adjunto.setFileName(new File(filePath).getName());

        // Combinar partes en el mensaje
        Multipart multipart = new MimeMultipart();
        multipart.addBodyPart(mensajeTexto);
        multipart.addBodyPart(adjunto);

        message.setContent(multipart);

        // Enviar el correo
        Transport.send(message);

        JOptionPane.showMessageDialog(this, "Correo enviado exitosamente a: " + emailDestino);

    } catch (MessagingException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al enviar el correo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    
    private void generarFactura() {
    int filaSeleccionada = TablaReservaciones.getSelectedRow();

    if (filaSeleccionada < 0) {
        JOptionPane.showMessageDialog(this, "Por favor, seleccione una reservaci칩n de la tabla.");
        return;
    }

    int idReserva = Integer.parseInt(TablaReservaciones.getValueAt(filaSeleccionada, 0).toString());

    String cliente = "";
    String correo = "";
    double totalHabitacion = 0;
    double totalServicios = 0;
    double total = 0;

    List<String[]> habitacionesList = new ArrayList<>();
    List<String[]> serviciosList = new ArrayList<>();

    try (Connection conn = Conexion.conectar()) {
        // Consulta para obtener los datos del cliente y habitaciones
        String reservaQuery = "SELECT CONCAT(c.nombre, ' ', c.apellidoPaterno, ' ', IFNULL(c.apellidoMaterno, '')) AS cliente, " +
                              "c.correo, h.idHabitacion, h.precio " +
                              "FROM Reserva r " +
                              "JOIN Cliente c ON r.idCliente = c.idCliente " +
                              "JOIN HabitacionReserva hr ON r.idReserva = hr.idReserva " +
                              "JOIN Habitacion h ON hr.idHabitacion = h.idHabitacion " +
                              "WHERE r.idReserva = ?";

        try (PreparedStatement pstReserva = conn.prepareStatement(reservaQuery)) {
            pstReserva.setInt(1, idReserva);
            ResultSet rsReserva = pstReserva.executeQuery();

            while (rsReserva.next()) {
                if (cliente.isEmpty()) {
                    cliente = rsReserva.getString("cliente");
                    correo = rsReserva.getString("correo");
                }
                habitacionesList.add(new String[]{
                    rsReserva.getString("idHabitacion"),
                    String.valueOf(rsReserva.getDouble("precio"))
                });
                totalHabitacion += rsReserva.getDouble("precio");
            }
        }

        // Consulta para obtener los servicios asociados a la reserva
        String serviciosQuery = "SELECT s.descripcion, s.precio FROM Servicio s WHERE s.idReserva = ?";
        try (PreparedStatement pstServicios = conn.prepareStatement(serviciosQuery)) {
            pstServicios.setInt(1, idReserva);
            ResultSet rsServicios = pstServicios.executeQuery();
            while (rsServicios.next()) {
                serviciosList.add(new String[]{
                    rsServicios.getString("descripcion"),
                    String.valueOf(rsServicios.getDouble("precio"))
                });
                totalServicios += rsServicios.getDouble("precio");
            }
        }

        total = totalHabitacion + totalServicios;
        
        // Insertar la factura en la base de datos
String insertFacturaQuery = "INSERT INTO Factura (idReserva, fecha_emision, total_habitacion, total_servicios, total) " +
                            "VALUES (?, CURRENT_TIMESTAMP, ?, ?, ?)";

try (PreparedStatement pstInsertFactura = conn.prepareStatement(insertFacturaQuery, Statement.RETURN_GENERATED_KEYS)) {
    pstInsertFactura.setInt(1, idReserva);
    pstInsertFactura.setDouble(2, totalHabitacion);
    pstInsertFactura.setDouble(3, totalServicios);
    pstInsertFactura.setDouble(4, total);

    int filasAfectadas = pstInsertFactura.executeUpdate();

    if (filasAfectadas > 0) {
        ResultSet generatedKeys = pstInsertFactura.getGeneratedKeys();
        if (generatedKeys.next()) {
            int idFactura = generatedKeys.getInt(1);
            JOptionPane.showMessageDialog(this, "Factura #" + idFactura + " registrada exitosamente en la base de datos.");
        }
    } else {
        JOptionPane.showMessageDialog(this, "No se pudo registrar la factura en la base de datos.");
    }
}


        // Pedir m칠todo de pago
        String[] opcionesPago = {"Efectivo", "Tarjeta de Cr칠dito"};
        String metodoPago = (String) JOptionPane.showInputDialog(this, "Seleccione el m칠todo de pago:", "M칠todo de Pago",
                JOptionPane.QUESTION_MESSAGE, null, opcionesPago, opcionesPago[0]);

        String detallesPago = "";

        if ("Efectivo".equals(metodoPago)) {
            boolean entradaValida = false;
            double pagoCliente = 0;
            while (!entradaValida) {
                try {
                    String pagoStr = JOptionPane.showInputDialog(this, "Ingrese la cantidad con la que paga el cliente:");
                    if (pagoStr == null) return;
                    pagoCliente = Double.parseDouble(pagoStr);
                    if (pagoCliente >= total) {
                        double cambio = pagoCliente - total;
                        detallesPago = "M칠todo de Pago: Efectivo\n" +
                                       "Pago del Cliente: $" + pagoCliente + "\n" +
                                       "Cambio: $" + cambio;
                        entradaValida = true;
                    } else {
                        JOptionPane.showMessageDialog(this, "La cantidad ingresada es insuficiente.");
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Entrada inv치lida. Por favor, ingrese un n칰mero v치lido.");
                }
            }
        } else if ("Tarjeta de Cr칠dito".equals(metodoPago)) {
            boolean entradaValida = false;
            while (!entradaValida) {
                try {
                    String numeroTarjeta = JOptionPane.showInputDialog(this, "Ingrese el n칰mero de tarjeta (16 d칤gitos):");
                    if (numeroTarjeta == null) return;
                    if (!numeroTarjeta.matches("\\d{16}")) throw new Exception("N칰mero de tarjeta inv치lido.");

                    String nombreTarjeta = JOptionPane.showInputDialog(this, "Ingrese el nombre en la tarjeta:");
                    if (nombreTarjeta == null) return;

                    String mesExpiracion = JOptionPane.showInputDialog(this, "Ingrese el mes de expiraci칩n (01-12):");
                    if (mesExpiracion == null) return;
                    int mes = Integer.parseInt(mesExpiracion);
                    if (mes < 1 || mes > 12) throw new Exception("Mes de expiraci칩n inv치lido.");

                    String anioExpiracion = JOptionPane.showInputDialog(this, "Ingrese el a침o de expiraci칩n (mayor o igual a 2024):");
                    if (anioExpiracion == null) return;
                    int anio = Integer.parseInt(anioExpiracion);
                    if (anio < 2024) throw new Exception("A침o de expiraci칩n inv치lido.");

                    String cvc = JOptionPane.showInputDialog(this, "Ingrese el CVC (3 d칤gitos):");
                    if (cvc == null) return;
                    if (!cvc.matches("\\d{3}")) throw new Exception("CVC inv치lido.");

                    detallesPago = "M칠todo de Pago: Tarjeta de Cr칠dito\n" +
                                   "N칰mero de Tarjeta: **** **** **** " + numeroTarjeta.substring(12) + "\n" +
                                   "Nombre en la Tarjeta: " + nombreTarjeta + "\n" +
                                   "Expiraci칩n: " + mesExpiracion + "/" + anioExpiracion;
                    entradaValida = true;
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            }
        }

        // Generar el PDF
        String rutaCarpeta = "C:\\Users\\Victor\\Documents\\Proyecto final TA\\PDF BDHotel";
        String fileName = rutaCarpeta + "\\Factura_" + idReserva + ".pdf";

        Document document = new Document();
        PdfWriter.getInstance(document, new FileOutputStream(fileName));
        document.open();

        document.add(new Paragraph("Factura de Reserva #" + idReserva, FontFactory.getFont(FontFactory.HELVETICA_BOLD, 18)));
        document.add(new Paragraph("Cliente: " + cliente));
        document.add(new Paragraph("Correo: " + correo));
        document.add(new Paragraph("Fecha de emisi칩n: " + new Timestamp(System.currentTimeMillis()).toString()));
        document.add(new Paragraph("\n"));

        // Tabla de habitaciones
        document.add(new Paragraph("Habitaciones:", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 14)));
        PdfPTable tablaHabitaciones = new PdfPTable(2);
        tablaHabitaciones.addCell("No. Habitaci칩n");
        tablaHabitaciones.addCell("Precio");
        for (String[] habitacion : habitacionesList) {
            tablaHabitaciones.addCell(habitacion[0]);
            tablaHabitaciones.addCell("$" + habitacion[1]);
        }
        document.add(tablaHabitaciones);
        document.add(new Paragraph("\n"));

        // Tabla de servicios
        document.add(new Paragraph("Servicios:", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 14)));
        PdfPTable tablaServicios = new PdfPTable(2);
        tablaServicios.addCell("Descripci칩n");
        tablaServicios.addCell("Precio");
        for (String[] servicio : serviciosList) {
            tablaServicios.addCell(servicio[0]);
            tablaServicios.addCell("$" + servicio[1]);
        }
        document.add(tablaServicios);
        document.add(new Paragraph("\n"));

        document.add(new Paragraph("Total Habitaci칩n: $" + totalHabitacion));
        document.add(new Paragraph("Total Servicios: $" + totalServicios));
        document.add(new Paragraph("Total a Pagar: $" + total));
        document.add(new Paragraph("\n" + detallesPago));

        document.close();

        JOptionPane.showMessageDialog(this, "Factura generada exitosamente en: " + fileName);

        // Abrir el PDF
        File pdfFile = new File(fileName);
        if (pdfFile.exists()) {
            Desktop.getDesktop().open(pdfFile);
        }

    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al generar la factura: " + e.getMessage());
    }
}


    //-----------------------------------------------
    private void cargarFacturasEnTabla() {
    // Crear el modelo de la tabla
    DefaultTableModel modelo = new DefaultTableModel();
    modelo.setColumnIdentifiers(new Object[]{
        "ID Factura", "Cliente", "Fecha Emisi칩n", "Habitaciones", 
        "Total Habitaci칩n", "Total Servicios", "Total"
    });

    // Asignar el modelo a la tabla
    TablaFacturas.setModel(modelo);

    // Consulta SQL para obtener los datos de las facturas
    String query = "SELECT f.idFactura, f.fecha_emision, f.total_habitacion, f.total_servicios, f.total, " +
                   "CONCAT(c.nombre, ' ', c.apellidoPaterno, ' ', IFNULL(c.apellidoMaterno, '')) AS cliente, " +
                   "GROUP_CONCAT(h.idHabitacion SEPARATOR ', ') AS habitaciones " +
                   "FROM Factura f " +
                   "JOIN Reserva r ON f.idReserva = r.idReserva " +
                   "JOIN Cliente c ON r.idCliente = c.idCliente " +
                   "JOIN HabitacionReserva hr ON r.idReserva = hr.idReserva " +
                   "JOIN Habitacion h ON hr.idHabitacion = h.idHabitacion " +
                   "GROUP BY f.idFactura, f.fecha_emision, f.total_habitacion, f.total_servicios, f.total, " +
                   "c.nombre, c.apellidoPaterno, c.apellidoMaterno";

    try (Connection conn = Conexion.conectar();
         Statement stmt = conn.createStatement();
         ResultSet rs = stmt.executeQuery(query)) {

        // Limpiar el modelo actual
        modelo.setRowCount(0);

        // Llenar el modelo con los datos obtenidos de la consulta
        while (rs.next()) {
            Object[] fila = new Object[]{
                rs.getInt("idFactura"),
                rs.getString("cliente"),
                rs.getTimestamp("fecha_emision"),
                rs.getString("habitaciones"),
                rs.getDouble("total_habitacion"),
                rs.getDouble("total_servicios"),
                rs.getDouble("total")
            };
            modelo.addRow(fila);
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al cargar las facturas: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}

    
    private void cargarReservaciones() {
    // Consulta SQL para obtener los datos de las reservas con sus habitaciones y totales
    String query = "SELECT r.idReserva, " +
                   "CONCAT(c.nombre, ' ', c.apellidoPaterno, ' ', IFNULL(c.apellidoMaterno, '')) AS cliente, " +
                   "r.fecha_inicio, r.fecha_fin, " +
                   "GROUP_CONCAT(h.idHabitacion ORDER BY h.idHabitacion SEPARATOR ', ') AS habitaciones, " +
                   "SUM(h.precio) AS totalHabitacion, " +
                   "IFNULL((SELECT SUM(s.precio) FROM Servicio s WHERE s.idReserva = r.idReserva), 0) AS totalServicios " +
                   "FROM Reserva r " +
                   "JOIN Cliente c ON r.idCliente = c.idCliente " +
                   "JOIN HabitacionReserva hr ON r.idReserva = hr.idReserva " +
                   "JOIN Habitacion h ON hr.idHabitacion = h.idHabitacion " +
                   "GROUP BY r.idReserva, c.nombre, c.apellidoPaterno, c.apellidoMaterno, r.fecha_inicio, r.fecha_fin";

    try (java.sql.Connection conn = Conexion.conectar();
         java.sql.Statement stmt = conn.createStatement();
         ResultSet rs = stmt.executeQuery(query)) {

        // Crear el modelo de la tabla con encabezados correctos
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(new Object[] {
            "ID Reserva", "Cliente", "Fecha Inicio", "Fecha Fin", "Habitaciones", "Total Habitaciones", "Total Servicios"
        });

        // Asignar el modelo a la tabla
        TablaReservaciones.setModel(model);

        // Limpiar las filas actuales (en caso de que haya datos previos)
        model.setRowCount(0);

        // Llenar el modelo con los datos obtenidos de la consulta
        while (rs.next()) {
            Object[] row = new Object[7];
            row[0] = rs.getInt("idReserva"); // ID de la reserva
            row[1] = rs.getString("cliente"); // Nombre completo del cliente
            row[2] = rs.getDate("fecha_inicio"); // Fecha de inicio
            row[3] = rs.getDate("fecha_fin"); // Fecha de fin
            row[4] = rs.getString("habitaciones"); // Lista de habitaciones asociadas
            row[5] = rs.getDouble("totalHabitacion"); // Total de habitaciones
            row[6] = rs.getDouble("totalServicios"); // Total de servicios

            model.addRow(row);
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al cargar las reservaciones: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}


}
