package vista;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import conexion.Conexion;
import java.awt.Desktop;
import java.io.File;
import java.io.FileOutputStream;
import java.sql.*;
import java.util.Properties;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import javax.mail.*;
import javax.mail.internet.*;
import java.awt.Desktop;
import java.awt.Dimension;
import java.io.File;
import java.io.FileOutputStream;
import java.sql.*;
import java.util.Properties;
import javax.swing.JOptionPane;
import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;

/**
 *
 * @author Victor
 */
public class InterFactura extends javax.swing.JInternalFrame {

    /**
     * Creates new form InterFactura
     */
    public InterFactura() {
        initComponents();
        cargarReservasEnTabla();
        cargarFacturasEnTabla();
        this.setSize(new Dimension(944, 265));
        this.setTitle("Factura");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Factura = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        TablaReservaciones = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaFacturas = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        Factura.setText("Generar Factura");
        Factura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FacturaActionPerformed(evt);
            }
        });

        TablaReservaciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID HabitacionReserva", "Cliente", "Fecha Inicio", "Fecha Fin", "Fecha Reserva", "Habitaciones"
            }
        ));
        jScrollPane4.setViewportView(TablaReservaciones);

        TablaFacturas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID Factura", "Cliente", "Fecha Emision", "Habitaciones", "Total Habitaciones", "Total Servicios", "Total"
            }
        ));
        jScrollPane1.setViewportView(TablaFacturas);

        jButton1.setText("Crear Factura");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 22, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(163, 163, 163)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Factura)
                .addGap(201, 201, 201))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(Factura))
                .addContainerGap(54, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void FacturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FacturaActionPerformed
        this.generarFacturaDesdeTabla();
    }//GEN-LAST:event_FacturaActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.crearFactura();
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Factura;
    private javax.swing.JTable TablaFacturas;
    private javax.swing.JTable TablaReservaciones;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    // End of variables declaration//GEN-END:variables


public void generarFacturaDesdeTabla() {
    // Obtener la fila seleccionada
    int filaSeleccionada = TablaFacturas.getSelectedRow();

    if (filaSeleccionada < 0) {
        JOptionPane.showMessageDialog(this, "Por favor, seleccione una factura de la tabla.");
        return;
    }

    // Obtener el idFactura de la fila seleccionada
    int idFactura = Integer.parseInt(TablaFacturas.getValueAt(filaSeleccionada, 0).toString());
    String rutaCarpeta = "C:\\Users\\Victor\\Documents\\Proyecto final TA\\PDF BDHotel";
    String fileName = rutaCarpeta + "\\Factura_" + idFactura + ".pdf";

    // Consulta SQL para obtener los datos de la factura seleccionada
    String query = "SELECT f.idFactura, f.fecha_emision, f.total_habitacion, f.total_servicios, f.total, " +
                   "c.nombre, c.apellidoPaterno, c.apellidoMaterno, " +
                   "GROUP_CONCAT(h.idHabitacion SEPARATOR ', ') AS habitaciones " +
                   "FROM Factura f " +
                   "JOIN HabitacionReserva hr ON f.idHabitacionReserva = hr.idHabitacionReserva " +
                   "JOIN Reserva r ON hr.idReserva = r.idReserva " +
                   "JOIN Cliente c ON r.idCliente = c.idCliente " +
                   "JOIN Habitacion h ON hr.idHabitacion = h.idHabitacion " +
                   "WHERE f.idFactura = ? " +
                   "GROUP BY f.idFactura";

    try (Connection conn = Conexion.conectar();
         PreparedStatement pst = conn.prepareStatement(query)) {

        pst.setInt(1, idFactura);
        ResultSet rs = pst.executeQuery();

        if (rs.next()) {
            // Crear la carpeta si no existe
            File carpeta = new File(rutaCarpeta);
            if (!carpeta.exists()) {
                carpeta.mkdirs();
            }

            // Crear el documento PDF
            Document document = new Document();
            PdfWriter.getInstance(document, new FileOutputStream(fileName));
            document.open();

            // Título
            Paragraph title = new Paragraph("Factura #" + idFactura, FontFactory.getFont(FontFactory.HELVETICA_BOLD, 18));
            title.setAlignment(Element.ALIGN_CENTER);
            document.add(title);
            document.add(new Paragraph(" "));

            // Información del cliente
            document.add(new Paragraph("Cliente: " + rs.getString("nombre") + " " +
                                       rs.getString("apellidoPaterno") + " " +
                                       rs.getString("apellidoMaterno")));
            document.add(new Paragraph("Fecha de emisión: " + rs.getTimestamp("fecha_emision").toString()));
            document.add(new Paragraph("Habitaciones: " + rs.getString("habitaciones")));
            document.add(new Paragraph(" "));

            // Detalles de la factura
            PdfPTable table = new PdfPTable(2);
            table.setWidthPercentage(100);
            table.setSpacingBefore(10f);

            table.addCell("Total Habitación:");
            table.addCell("$" + rs.getDouble("total_habitacion"));

            table.addCell("Total Servicios:");
            table.addCell("$" + rs.getDouble("total_servicios"));

            table.addCell("Total a Pagar:");
            table.addCell("$" + rs.getDouble("total"));

            document.add(table);

            // Cerrar el documento
            document.close();

            JOptionPane.showMessageDialog(this, "Factura generada correctamente: " + fileName);

            // Abrir el PDF automáticamente
            File pdfFile = new File(fileName);
            if (pdfFile.exists()) {
                Desktop.getDesktop().open(pdfFile);
            } else {
                JOptionPane.showMessageDialog(this, "El archivo PDF no se encontró.");
                return;
            }

            // Enviar el correo a una dirección fija
            String emailDestino = "vicman08hvx@gmail.com";  // Correo del destinatario fijo
            enviarCorreoConAdjunto(emailDestino, fileName);

        } else {
            JOptionPane.showMessageDialog(this, "No se encontró la factura seleccionada.");
        }

    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al generar la factura: " + e.getMessage());
    }
}

private void enviarCorreoConAdjunto(String emailDestino, String filePath) {
    // Configuración del servidor SMTP (usando Gmail como ejemplo)
    final String remitente = "22161075@itoaxaca.edu.mx"; // Cambia por tu correo
    final String password = "*******";            // Cambia por tu contraseña o token de aplicación

    // Configuración de propiedades
    Properties props = new Properties();
    props.put("mail.smtp.auth", "true");
    props.put("mail.smtp.starttls.enable", "true");
    props.put("mail.smtp.host", "smtp.gmail.com");
    props.put("mail.smtp.port", "587");

    // Crear la sesión de correo
    Session session = Session.getInstance(props, new javax.mail.Authenticator() {
        protected PasswordAuthentication getPasswordAuthentication() {
            return new PasswordAuthentication(remitente, password);
        }
    });

    try {
        // Crear el mensaje
        Message message = new MimeMessage(session);
        message.setFrom(new InternetAddress(remitente));
        message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(emailDestino));
        message.setSubject("Factura Generada");

        // Cuerpo del mensaje
        MimeBodyPart mensajeTexto = new MimeBodyPart();
        mensajeTexto.setText("Adjunto encontrará su factura en formato PDF.");

        // Adjuntar el archivo PDF
        MimeBodyPart adjunto = new MimeBodyPart();
        DataSource source = new FileDataSource(filePath);
        adjunto.setDataHandler(new DataHandler(source));
        adjunto.setFileName(new File(filePath).getName());

        // Combinar partes en el mensaje
        Multipart multipart = new MimeMultipart();
        multipart.addBodyPart(mensajeTexto);
        multipart.addBodyPart(adjunto);

        message.setContent(multipart);

        // Enviar el correo
        Transport.send(message);
        JOptionPane.showMessageDialog(this, "Correo enviado exitosamente a: " + emailDestino);

    } catch (MessagingException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al enviar el correo: " + e.getMessage());
    }
}




private void cargarFacturasEnTabla() {
    // Crear el modelo de la tabla
    DefaultTableModel modelo = new DefaultTableModel();
    modelo.setColumnIdentifiers(new Object[]{
        "ID Factura", "Cliente", "Fecha Emisión", "Habitaciones", 
        "Total Habitación", "Total Servicios", "Total"
    });

    // Asignar el modelo a la tabla
    TablaFacturas.setModel(modelo);

    // Consulta SQL para obtener los datos de las facturas con el nombre completo del cliente y habitaciones
    String query = "SELECT f.idFactura, f.fecha_emision, f.total_habitacion, f.total_servicios, f.total, " +
                   "CONCAT(c.nombre, ' ', c.apellidoPaterno, ' ', IFNULL(c.apellidoMaterno, '')) AS cliente, " +
                   "GROUP_CONCAT(h.idHabitacion SEPARATOR ', ') AS habitaciones " +
                   "FROM Factura f " +
                   "JOIN HabitacionReserva hr ON f.idHabitacionReserva = hr.idHabitacionReserva " +
                   "JOIN Reserva r ON hr.idReserva = r.idReserva " +
                   "JOIN Cliente c ON r.idCliente = c.idCliente " +
                   "JOIN Habitacion h ON hr.idHabitacion = h.idHabitacion " +
                   "GROUP BY f.idFactura, f.fecha_emision, f.total_habitacion, f.total_servicios, f.total, " +
                   "c.nombre, c.apellidoPaterno, c.apellidoMaterno";

    try (Connection conn = Conexion.conectar();
         Statement stmt = conn.createStatement();
         ResultSet rs = stmt.executeQuery(query)) {

        // Limpiar el modelo actual
        modelo.setRowCount(0);

        // Llenar el modelo con los datos obtenidos de la consulta
        while (rs.next()) {
            Object[] fila = new Object[]{
                rs.getInt("idFactura"),
                rs.getString("cliente"),
                rs.getTimestamp("fecha_emision"),
                rs.getString("habitaciones"),
                rs.getDouble("total_habitacion"),
                rs.getDouble("total_servicios"),
                rs.getDouble("total")
            };
            modelo.addRow(fila);
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al cargar las facturas: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}



private void cargarReservasEnTabla() {
    // Crear el modelo de la tabla con los encabezados correctos
    DefaultTableModel modelo = new DefaultTableModel();
    modelo.setColumnIdentifiers(new Object[]{
        "ID Habitación Reserva", "Cliente", "Fecha Inicio", "Fecha Fin", "Fecha Reserva", "Habitaciones"
    });

    // Asignar el modelo a la tabla
    TablaReservaciones.setModel(modelo);

    // Consulta SQL para obtener los datos de las reservas con los detalles del cliente y habitaciones
    String query = "SELECT hr.idHabitacionReserva, " +
                   "CONCAT(c.nombre, ' ', c.apellidoPaterno, ' ', IFNULL(c.apellidoMaterno, '')) AS cliente, " +
                   "r.fecha_inicio, r.fecha_fin, r.fecha_reserva, " +
                   "GROUP_CONCAT(h.idHabitacion SEPARATOR ', ') AS habitaciones " +
                   "FROM Reserva r " +
                   "JOIN Cliente c ON r.idCliente = c.idCliente " +
                   "JOIN HabitacionReserva hr ON r.idReserva = hr.idReserva " +
                   "JOIN Habitacion h ON hr.idHabitacion = h.idHabitacion " +
                   "GROUP BY hr.idHabitacionReserva, r.idReserva, c.nombre, c.apellidoPaterno, c.apellidoMaterno, r.fecha_inicio, r.fecha_fin, r.fecha_reserva";

    try (Connection conn = Conexion.conectar();
         Statement stmt = conn.createStatement();
         ResultSet rs = stmt.executeQuery(query)) {

        // Limpiar el modelo actual
        modelo.setRowCount(0);

        // Llenar el modelo con los datos obtenidos de la consulta
        while (rs.next()) {
            Object[] fila = new Object[]{
                rs.getInt("idHabitacionReserva"),
                rs.getString("cliente"),
                rs.getDate("fecha_inicio"),
                rs.getDate("fecha_fin"),
                rs.getTimestamp("fecha_reserva"),
                rs.getString("habitaciones")
            };
            modelo.addRow(fila);
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al cargar las reservas: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}

    private void crearFactura() {
    // Obtener la fila seleccionada en TablaReservas
    int filaSeleccionada = TablaReservaciones.getSelectedRow();

    if (filaSeleccionada < 0) {
        JOptionPane.showMessageDialog(this, "Por favor, seleccione una reservación de la tabla.");
        return;
    }

    // Obtener el idHabitacionReserva de la tabla
    int idHabitacionReserva = Integer.parseInt(TablaReservaciones.getValueAt(filaSeleccionada, 0).toString());

    // Variables para almacenar los totales
    double totalHabitacion = 0;
    double totalServicios = 0;
    double total = 0;

    try (Connection conn = Conexion.conectar()) {
        // Consulta para obtener el precio de la habitación asociada a la reserva
        String habitacionQuery = "SELECT h.precio FROM Habitacion h " +
                                 "JOIN HabitacionReserva hr ON h.idHabitacion = hr.idHabitacion " +
                                 "WHERE hr.idHabitacionReserva = ?";
        
        try (PreparedStatement pstHabitacion = conn.prepareStatement(habitacionQuery)) {
            pstHabitacion.setInt(1, idHabitacionReserva);
            ResultSet rsHabitacion = pstHabitacion.executeQuery();
            
            if (rsHabitacion.next()) {
                totalHabitacion = rsHabitacion.getDouble("precio");
            }
        }

        // Consulta para obtener el total de los servicios asociados a la reserva
        String serviciosQuery = "SELECT IFNULL(SUM(s.precio), 0) AS totalServicios " +
                                "FROM Servicio s " +
                                "JOIN HabitacionReserva hr ON s.idReserva = hr.idReserva " +
                                "WHERE hr.idHabitacionReserva = ?";

        try (PreparedStatement pstServicios = conn.prepareStatement(serviciosQuery)) {
            pstServicios.setInt(1, idHabitacionReserva);
            ResultSet rsServicios = pstServicios.executeQuery();

            if (rsServicios.next()) {
                totalServicios = rsServicios.getDouble("totalServicios");
            }
        }

        // Calcular el total final
        total = totalHabitacion + totalServicios;

        // Consulta SQL para insertar una nueva factura con los totales calculados
        String insertQuery = "INSERT INTO Factura (idHabitacionReserva, total_habitacion, total_servicios, total) VALUES (?, ?, ?, ?)";

        try (PreparedStatement pst = conn.prepareStatement(insertQuery)) {
            pst.setInt(1, idHabitacionReserva);
            pst.setDouble(2, totalHabitacion);
            pst.setDouble(3, totalServicios);
            pst.setDouble(4, total);

            int filasAfectadas = pst.executeUpdate();

            if (filasAfectadas > 0) {
                JOptionPane.showMessageDialog(this, "Factura creada exitosamente con el total calculado.");
                cargarFacturasEnTabla(); // Actualiza la tabla de facturas después de crear una nueva
            } else {
                JOptionPane.showMessageDialog(this, "No se pudo crear la factura.");
            }
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al crear la factura: " + e.getMessage());
    }
}



}
